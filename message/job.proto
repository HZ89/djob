syntax = "proto3";
// import "google/protobuf/timestamp.proto";

package message;

service job {
    rpc GetJob (Name) returns (Job) {}
    rpc GetExecution (Name) returns (Execution) {}
    rpc ExecDone (Execution) returns (Result) {}
    rpc SetJob (Job) returns (Result) {
    }
}

message Name {
    string Name = 1;
}

message Job {
    string Name = 1; // Job name. Must bt unique
    string Region = 2; // Job run in this region normally.
    string schedule = 3;
    bool Shell = 4; // Use shell to run command
    string Command = 5; // Command to run
    string Expression = 6; // A expression used for filter agent node, job will run in the node when this expression is true
    repeated string BeingDependentJobs = 7; // Other jobs that depend on this job.
    string ParentJob = 8; // This job depends on the job.
    bool Parallel = 9; // Parallel policy for this job. if true, this job will run in all target node.
    bool Concurrent = 10; // Concurrent or not. if true, the next job will start regardless of whether or not the last time the execution is complete
    bool Disable = 11; // if true, job don't run
    string SchedulerNodeName = 12; // which node schedule this job
}

message JobStatus {
    string Name = 1;
    int64 SuccessCount = 2; // Number of successful executions of this job
    int64 ErrorCount = 3; // Number of errors of this job
    string LastHandleAgent = 4; // The agent node name which exec the job last time
    string LastSuccess = 5; // Last time this jon executed successful in rfc 3339
    string LastError = 6; // Last time this job failed
}

message Execution {
    string Name = 1;
    string Cmd = 2;
    bytes Output = 3;
    bool Succeed = 4;
    string StartTime = 5;
    string FinishTime = 6;
    string NodeName = 7;
    string JobName = 8;
    int64 Retries = 9; // Number of times to retry a execution

}

message Result {
    bool err = 1;
}

message Resp {
    string error = 1;
    repeated Job data = 2;
}
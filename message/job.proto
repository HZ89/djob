/*
 * Copyright (c) 2017.  Harrison Zhu <wcg6121@gmail.com>
 * This file is part of djob <https://github.com/HZ89/djob>.
 *
 * djob is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * djob is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with djob.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

package message;
service job {
    rpc GetJob (Job) returns (Job) {
    }
    rpc ExecDone (Execution) returns (google.protobuf.Empty) {
    }
    rpc DoOps (Params) returns (Result) {
    }
    rpc ProxyJobRun (Job) returns (Execution) {
    }
    rpc AcquireToken (string) returns (bool) {
    }
    rpc RecedeToken (string) returns (google.protobuf.Empty) {
    }
}

enum Ops {
    READ = 0;
    ADD = 1;
    MODIFY = 2;
    DELETE = 3;
}

message Search {
    repeated string Conditions = 1;
    repeated string Links = 2;
    int32 PageNum = 3;
    int32 PageSize = 4;
    bool Count = 5;
}

message Params {
    google.protobuf.Any Obj = 1;
    Ops Ops = 2;
    Search Search = 3;
}

message Result {
    bool Succeed = 1;
    int32 MaxPageNum = 2;
    repeated google.protobuf.Any Objs = 3;
}

message Job {
    // @inject_tag: gorm:"type:varchar(64);not null;primary_key"
    string Name = 1; // Job name. Must be unique in one region
    // @inject_tag: gorm:"type:varchar(64);not null;primary_key"
    string Region = 2; // Job run in this region normally.
    // @inject_tag: gorm:"type:varchar(64)"
    string Schedule = 3; // schedule of job running
    // @inject_tag: gorm:"type:tinyint(4)"
    bool Shell = 4; // Use shell to run command
    // @inject_tag: gorm:"type:varchar(512);not null"
    string Command = 5; // Command to run
    // @inject_tag: gorm:"type:varchar(64);not null"
    string Expression = 6; // A expression used for filter agent node, job will run in the node when this expression is true
    // @inject_tag: gorm:"type:tinyint(4)"
    bool Idempotent = 7; // idempotence, if true, we will try this job many times
    // @inject_tag: gorm:"type:tinyint(4)"
    bool Disable = 8; // if true, job don't run
    // @inject_tag: gorm:"type:varchar(64); not null"
    string SchedulerNodeName = 9; // which node schedule this job
    // @inject_tag: gorm:"type:varchar(64);not null;index:pjn_idx"
    string ParentJobName = 10; // if have a parent job, this job are activated when the parent job is successfully executed
    // @inject_tag: gorm:"-"
    Job ParentJob = 11;
    // @inject_tag: gorm:"type:decimal(3,2);not null;default:'1.00'"
    double Threshold = 12; // If the success rate of the parent job to achieve this value will trigger the sub-job execution
    // @inject_tag: gorm:"type:bigint(21);not null;default:'3600'"
    int32 MaxRunTime = 13; // Execution time limit
    // @inject_tag: gorm:"type:int;not null;default:'-1'"
    int32 Concurrency = 14; // The maximum number of agents running the job at the same time
}

message JobStatus {
    string Name = 1;
    string Region = 2;
    int64 SuccessCount = 3; // Number of successful executions of this job
    int64 ErrorCount = 4; // Number of errors of this job
    string LastHandleAgent = 5; // The agent node name which exec the job last time
    string LastSuccess = 6; // Last time this jon executed successful in rfc 3339
    string LastError = 7; // Last time this job failed
}

message Execution {
    // @inject_tag: gorm:"type:varchar(64);not null"
    string SchedulerNodeName = 1;
    // @inject_tag: gorm:"type:blob"
    bytes Output = 2; // job output
    // @inject_tag: gorm:"type:tinyint(4)"
    bool Succeed = 3; // exetution status
    // @inject_tag: gorm:"type:bigint(21);not null"
    int64 StartTime = 4;
    // @inject_tag: gorm:"type:bigint(21);not null"
    int64 FinishTime = 5;
    // @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"Name"
    string Name = 6; // name of job
    // @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"Rgion"
    string Region = 7; // The region of job
    // @inject_tag: gorm:"type:int(11);not null"
    int64 Retries = 8; // Number of times to retry a execution
    // @inject_tag: gorm:"type:bigint(21);primary_key;not null" form:"Group"
    int64 Group = 9; // this execution belong to which group, group will be created when a job is to be executed
    // @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"NodeName"
    string RunNodeName = 10; // name of the node on which this execution is running
}

message Node {
    string Name = 1; // node name
    string Region = 2; // region of this node
    string Version = 3; // agent version
    bool Alived = 4; // node alive status
    string Role = 5; // is server or agent
    map<string, string> Tags = 6; // node tags
}
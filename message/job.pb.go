// Code generated by protoc-gen-go.
// source: job.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	job.proto
	serfQueryParams.proto

It has these top-level messages:
	Name
	Job
	JobStatus
	Execution
	Result
	Resp
	NewJobQueryParams
	RunJobQueryParams
	GetRPCConfigResp
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Name struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Job struct {
	Name               string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Region             string   `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
	Schedule           string   `protobuf:"bytes,3,opt,name=schedule" json:"schedule,omitempty"`
	Shell              bool     `protobuf:"varint,4,opt,name=Shell" json:"Shell,omitempty"`
	Command            string   `protobuf:"bytes,5,opt,name=Command" json:"Command,omitempty"`
	Expression         string   `protobuf:"bytes,6,opt,name=Expression" json:"Expression,omitempty"`
	BeingDependentJobs []string `protobuf:"bytes,7,rep,name=BeingDependentJobs" json:"BeingDependentJobs,omitempty"`
	ParentJob          string   `protobuf:"bytes,8,opt,name=ParentJob" json:"ParentJob,omitempty"`
	Parallel           bool     `protobuf:"varint,9,opt,name=Parallel" json:"Parallel,omitempty"`
	Concurrent         bool     `protobuf:"varint,10,opt,name=Concurrent" json:"Concurrent,omitempty"`
	Disable            bool     `protobuf:"varint,11,opt,name=Disable" json:"Disable,omitempty"`
	SchedulerNodeName  string   `protobuf:"bytes,12,opt,name=SchedulerNodeName" json:"SchedulerNodeName,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetShell() bool {
	if m != nil {
		return m.Shell
	}
	return false
}

func (m *Job) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Job) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *Job) GetBeingDependentJobs() []string {
	if m != nil {
		return m.BeingDependentJobs
	}
	return nil
}

func (m *Job) GetParentJob() string {
	if m != nil {
		return m.ParentJob
	}
	return ""
}

func (m *Job) GetParallel() bool {
	if m != nil {
		return m.Parallel
	}
	return false
}

func (m *Job) GetConcurrent() bool {
	if m != nil {
		return m.Concurrent
	}
	return false
}

func (m *Job) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Job) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

type JobStatus struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	SuccessCount    int64  `protobuf:"varint,2,opt,name=SuccessCount" json:"SuccessCount,omitempty"`
	ErrorCount      int64  `protobuf:"varint,3,opt,name=ErrorCount" json:"ErrorCount,omitempty"`
	LastHandleAgent string `protobuf:"bytes,4,opt,name=LastHandleAgent" json:"LastHandleAgent,omitempty"`
	LastSuccess     string `protobuf:"bytes,5,opt,name=LastSuccess" json:"LastSuccess,omitempty"`
	LastError       string `protobuf:"bytes,6,opt,name=LastError" json:"LastError,omitempty"`
}

func (m *JobStatus) Reset()                    { *m = JobStatus{} }
func (m *JobStatus) String() string            { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()               {}
func (*JobStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobStatus) GetSuccessCount() int64 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *JobStatus) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *JobStatus) GetLastHandleAgent() string {
	if m != nil {
		return m.LastHandleAgent
	}
	return ""
}

func (m *JobStatus) GetLastSuccess() string {
	if m != nil {
		return m.LastSuccess
	}
	return ""
}

func (m *JobStatus) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

type Execution struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Cmd        string `protobuf:"bytes,2,opt,name=Cmd" json:"Cmd,omitempty"`
	Output     []byte `protobuf:"bytes,3,opt,name=Output,proto3" json:"Output,omitempty"`
	Succeed    bool   `protobuf:"varint,4,opt,name=Succeed" json:"Succeed,omitempty"`
	StartTime  string `protobuf:"bytes,5,opt,name=StartTime" json:"StartTime,omitempty"`
	FinishTime string `protobuf:"bytes,6,opt,name=FinishTime" json:"FinishTime,omitempty"`
	NodeName   string `protobuf:"bytes,7,opt,name=NodeName" json:"NodeName,omitempty"`
	JobName    string `protobuf:"bytes,8,opt,name=JobName" json:"JobName,omitempty"`
	Retries    int64  `protobuf:"varint,9,opt,name=Retries" json:"Retries,omitempty"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Execution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Execution) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Execution) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Execution) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *Execution) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Execution) GetFinishTime() string {
	if m != nil {
		return m.FinishTime
	}
	return ""
}

func (m *Execution) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Execution) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *Execution) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

type Result struct {
	Err bool `protobuf:"varint,1,opt,name=err" json:"err,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Result) GetErr() bool {
	if m != nil {
		return m.Err
	}
	return false
}

type Resp struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data  []*Job `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Resp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Resp) GetData() []*Job {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Name)(nil), "message.Name")
	proto.RegisterType((*Job)(nil), "message.Job")
	proto.RegisterType((*JobStatus)(nil), "message.JobStatus")
	proto.RegisterType((*Execution)(nil), "message.Execution")
	proto.RegisterType((*Result)(nil), "message.Result")
	proto.RegisterType((*Resp)(nil), "message.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	GetJob(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Job, error)
	GetExecution(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Execution, error)
	ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*Result, error)
	SetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Result, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) GetJob(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/message.job/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) GetExecution(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Execution, error) {
	out := new(Execution)
	err := grpc.Invoke(ctx, "/message.job/GetExecution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/message.job/ExecDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) SetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/message.job/SetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	GetJob(context.Context, *Name) (*Job, error)
	GetExecution(context.Context, *Name) (*Execution, error)
	ExecDone(context.Context, *Execution) (*Result, error)
	SetJob(context.Context, *Job) (*Result, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetJob(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetExecution(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ExecDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ExecDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/ExecDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ExecDone(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_SetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).SetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/SetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).SetJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Job_GetJob_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _Job_GetExecution_Handler,
		},
		{
			MethodName: "ExecDone",
			Handler:    _Job_ExecDone_Handler,
		},
		{
			MethodName: "SetJob",
			Handler:    _Job_SetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xef, 0x8a, 0xd3, 0x4e,
	0x14, 0xfd, 0x75, 0xd3, 0xed, 0x9f, 0xdb, 0xfe, 0x58, 0x1d, 0x44, 0x42, 0x11, 0x29, 0xf9, 0x62,
	0x05, 0x29, 0xb8, 0xfb, 0x5d, 0xd0, 0x76, 0x55, 0x44, 0x56, 0x49, 0x7d, 0x81, 0xb4, 0xb9, 0xb4,
	0x91, 0x34, 0x53, 0x26, 0x13, 0xd8, 0xd7, 0xf3, 0x01, 0x7c, 0x16, 0xf1, 0x0d, 0xbc, 0xf7, 0xce,
	0x24, 0x6d, 0x77, 0xf3, 0xa9, 0x39, 0xe7, 0xdc, 0x99, 0x39, 0xf7, 0xcc, 0x9d, 0xc2, 0xf0, 0xa7,
	0x5e, 0xcf, 0x0f, 0x46, 0x5b, 0xad, 0xfa, 0x7b, 0x2c, 0xcb, 0x64, 0x8b, 0xd1, 0x04, 0xba, 0x77,
	0xc9, 0x1e, 0x95, 0x72, 0xbf, 0x61, 0x67, 0xda, 0x99, 0x0d, 0x63, 0xf9, 0x8e, 0xfe, 0x5c, 0x40,
	0xf0, 0x45, 0xaf, 0xdb, 0x34, 0xf5, 0x1c, 0x7a, 0x31, 0x6e, 0x33, 0x5d, 0x84, 0x17, 0xc2, 0x7a,
	0xa4, 0x26, 0x30, 0x28, 0x37, 0x3b, 0x4c, 0xab, 0x1c, 0xc3, 0x40, 0x94, 0x06, 0xab, 0x67, 0x70,
	0xb9, 0xda, 0x61, 0x9e, 0x87, 0x5d, 0x12, 0x06, 0xb1, 0x03, 0x2a, 0x84, 0xfe, 0x42, 0xef, 0xf7,
	0x49, 0x91, 0x86, 0x97, 0xb2, 0xa0, 0x86, 0xea, 0x25, 0xc0, 0xed, 0xfd, 0xc1, 0x90, 0x53, 0x3e,
	0xa7, 0x27, 0xe2, 0x09, 0xa3, 0xe6, 0xa0, 0x3e, 0x60, 0x56, 0x6c, 0x97, 0x78, 0xc0, 0x22, 0xc5,
	0xc2, 0x92, 0xd9, 0x32, 0xec, 0x4f, 0x03, 0xaa, 0x6b, 0x51, 0xd4, 0x0b, 0x18, 0x7e, 0x4f, 0x8c,
	0x43, 0xe1, 0x40, 0xb6, 0x3b, 0x12, 0xec, 0x9c, 0x40, 0x92, 0xe7, 0x98, 0x87, 0x43, 0x31, 0xd8,
	0x60, 0x76, 0xb2, 0xd0, 0xc5, 0xa6, 0x32, 0x5c, 0x1c, 0x82, 0xa8, 0x27, 0x0c, 0xf7, 0xb0, 0xcc,
	0xca, 0x64, 0x4d, 0x4d, 0x8f, 0x44, 0xac, 0xa1, 0x7a, 0x03, 0x4f, 0x57, 0xbe, 0x7f, 0x73, 0xa7,
	0x53, 0x94, 0x20, 0xc7, 0x72, 0xf6, 0x63, 0x21, 0xfa, 0xdd, 0x81, 0x21, 0x79, 0x59, 0xd9, 0xc4,
	0x56, 0x65, 0x6b, 0xee, 0x11, 0x8c, 0x57, 0xd5, 0x66, 0x43, 0x09, 0x2c, 0x74, 0x45, 0x5e, 0x38,
	0xfd, 0x20, 0x3e, 0xe3, 0x24, 0x37, 0x63, 0xb4, 0x71, 0x15, 0x81, 0x54, 0x9c, 0x30, 0x6a, 0x06,
	0x57, 0x5f, 0x93, 0xd2, 0x7e, 0xa6, 0x8c, 0x73, 0x7c, 0xbf, 0xe5, 0x96, 0xba, 0x72, 0xc4, 0x43,
	0x5a, 0x4d, 0x61, 0xc4, 0x94, 0xdf, 0xdd, 0xdf, 0xcf, 0x29, 0xc5, 0x99, 0x32, 0x94, 0xdd, 0xfd,
	0x15, 0x1d, 0x89, 0xe8, 0x2f, 0xf5, 0x73, 0x7b, 0x8f, 0x9b, 0xca, 0xf2, 0x7d, 0xb5, 0xf5, 0xf3,
	0x04, 0x82, 0xc5, 0x3e, 0xf5, 0x43, 0xc4, 0x9f, 0x3c, 0x59, 0xdf, 0x2a, 0x7b, 0xa8, 0x9c, 0xf3,
	0x71, 0xec, 0x11, 0x67, 0x2c, 0x87, 0x62, 0xea, 0xe7, 0xa7, 0x86, 0xec, 0x81, 0x12, 0x33, 0xf6,
	0x47, 0x46, 0x9b, 0x3b, 0x8f, 0x47, 0x82, 0xd3, 0xf8, 0x98, 0x15, 0x59, 0xb9, 0x13, 0xd9, 0x4f,
	0xd1, 0x91, 0xe1, 0x7b, 0x6f, 0x2e, 0xa6, 0xef, 0x26, 0xb6, 0xc6, 0x7c, 0x26, 0x5d, 0x87, 0x48,
	0x6e, 0x5e, 0x6a, 0xc8, 0x4a, 0x8c, 0xd6, 0x64, 0x58, 0xca, 0xb0, 0x04, 0x71, 0x0d, 0xe9, 0x45,
	0xd1, 0x5b, 0x28, 0xab, 0xdc, 0x72, 0x6f, 0x68, 0x8c, 0xb4, 0x3b, 0x88, 0xf9, 0x33, 0x7a, 0x07,
	0x5d, 0xd2, 0x0e, 0xfc, 0x12, 0x50, 0x12, 0x73, 0x51, 0x38, 0x40, 0x69, 0x77, 0xd3, 0xc4, 0x26,
	0x14, 0x46, 0x30, 0x1b, 0x5d, 0x8f, 0xe7, 0xfe, 0x8d, 0xce, 0xe9, 0xcc, 0x58, 0x94, 0xeb, 0x5f,
	0x1d, 0x08, 0xe8, 0x11, 0xab, 0x57, 0xd0, 0xfb, 0x84, 0x32, 0xb5, 0xff, 0x37, 0x55, 0x6c, 0x6b,
	0x72, 0xb6, 0x28, 0xfa, 0x4f, 0xdd, 0xc0, 0x98, 0x0a, 0x8f, 0x57, 0xf0, 0xa0, 0x5c, 0x35, 0xb0,
	0x29, 0xa1, 0x45, 0x6f, 0x61, 0xc0, 0x70, 0xa9, 0x0b, 0xfa, 0x5f, 0x78, 0x5c, 0x31, 0xb9, 0x6a,
	0x38, 0xd7, 0x28, 0x2d, 0x79, 0x0d, 0xbd, 0x95, 0x33, 0x74, 0xe6, 0xa0, 0xa5, 0x74, 0xdd, 0x93,
	0x7f, 0xa0, 0x9b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x2a, 0xdb, 0xef, 0x8e, 0x04, 0x00,
	0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message/job.proto

package message

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Ops int32

const (
	Ops_READ   Ops = 0
	Ops_ADD    Ops = 1
	Ops_MODIFY Ops = 2
	Ops_DELETE Ops = 3
)

var Ops_name = map[int32]string{
	0: "READ",
	1: "ADD",
	2: "MODIFY",
	3: "DELETE",
}
var Ops_value = map[string]int32{
	"READ":   0,
	"ADD":    1,
	"MODIFY": 2,
	"DELETE": 3,
}

func (x Ops) String() string {
	return proto.EnumName(Ops_name, int32(x))
}
func (Ops) EnumDescriptor() ([]byte, []int) { return fileDescriptorJob, []int{0} }

type Search struct {
	Conditions []string `protobuf:"bytes,1,rep,name=Conditions" json:"Conditions,omitempty"`
	Links      []string `protobuf:"bytes,2,rep,name=Links" json:"Links,omitempty"`
	PageNum    int32    `protobuf:"varint,3,opt,name=PageNum,proto3" json:"PageNum,omitempty"`
	PageSize   int32    `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Count      bool     `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *Search) Reset()                    { *m = Search{} }
func (m *Search) String() string            { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()               {}
func (*Search) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{0} }

func (m *Search) GetConditions() []string {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Search) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Search) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *Search) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Search) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

type Params struct {
	Obj    *google_protobuf2.Any `protobuf:"bytes,1,opt,name=Obj" json:"Obj,omitempty"`
	Ops    Ops                   `protobuf:"varint,2,opt,name=Ops,proto3,enum=message.Ops" json:"Ops,omitempty"`
	Search *Search               `protobuf:"bytes,3,opt,name=Search" json:"Search,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{1} }

func (m *Params) GetObj() *google_protobuf2.Any {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *Params) GetOps() Ops {
	if m != nil {
		return m.Ops
	}
	return Ops_READ
}

func (m *Params) GetSearch() *Search {
	if m != nil {
		return m.Search
	}
	return nil
}

type Result struct {
	Succeed    bool                    `protobuf:"varint,1,opt,name=Succeed,proto3" json:"Succeed,omitempty"`
	MaxPageNum int32                   `protobuf:"varint,2,opt,name=MaxPageNum,proto3" json:"MaxPageNum,omitempty"`
	Objs       []*google_protobuf2.Any `protobuf:"bytes,3,rep,name=Objs" json:"Objs,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{2} }

func (m *Result) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *Result) GetMaxPageNum() int32 {
	if m != nil {
		return m.MaxPageNum
	}
	return 0
}

func (m *Result) GetObjs() []*google_protobuf2.Any {
	if m != nil {
		return m.Objs
	}
	return nil
}

type Job struct {
	// @inject_tag: form:"Name" gorm:"type:varchar(64);not null;unique_index:n_g_idx"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" form:"Name" gorm:"type:varchar(64);not null;unique_index:n_g_idx"`
	// @inject_tag: form:"Region" gorm:"type:varchar(64);not null;unique_index:n_g_idx"
	Region string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty" form:"Region" gorm:"type:varchar(64);not null;unique_index:n_g_idx"`
	// @inject_tag: gorm:"type:varchar(64)"
	Schedule string `protobuf:"bytes,3,opt,name=Schedule,proto3" json:"Schedule,omitempty" gorm:"type:varchar(64)"`
	// @inject_tag: gorm:"type:tinyint(4)"
	Shell bool `protobuf:"varint,4,opt,name=Shell,proto3" json:"Shell,omitempty" gorm:"type:tinyint(4)"`
	// @inject_tag: gorm:"type:varchar(512);not null"
	Command string `protobuf:"bytes,5,opt,name=Command,proto3" json:"Command,omitempty" gorm:"type:varchar(512);not null"`
	// @inject_tag: gorm:"type:varchar(64);not null"
	Expression string `protobuf:"bytes,6,opt,name=Expression,proto3" json:"Expression,omitempty" gorm:"type:varchar(64);not null"`
	// @inject_tag: gorm:"type:tinyint(4)"
	Idempotent bool `protobuf:"varint,7,opt,name=Idempotent,proto3" json:"Idempotent,omitempty" gorm:"type:tinyint(4)"`
	// @inject_tag: gorm:"type:tinyint(4)"
	Disable bool `protobuf:"varint,8,opt,name=Disable,proto3" json:"Disable,omitempty" gorm:"type:tinyint(4)"`
	// @inject_tag: gorm:"type:varchar(64); not null"
	SchedulerNodeName string `protobuf:"bytes,9,opt,name=SchedulerNodeName,proto3" json:"SchedulerNodeName,omitempty" gorm:"type:varchar(64); not null"`
	// @inject_tag: gorm:"type:bigint(21);not null;primary_key"
	Id int64 `protobuf:"varint,10,opt,name=Id,proto3" json:"Id,omitempty" gorm:"type:bigint(21);not null;primary_key"`
	// @inject_tag: gorm:"ForeignKey:Id"
	ParentJob *Job `protobuf:"bytes,11,opt,name=ParentJob" json:"ParentJob,omitempty" gorm:"ForeignKey:Id"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{3} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetShell() bool {
	if m != nil {
		return m.Shell
	}
	return false
}

func (m *Job) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Job) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *Job) GetIdempotent() bool {
	if m != nil {
		return m.Idempotent
	}
	return false
}

func (m *Job) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Job) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

func (m *Job) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Job) GetParentJob() *Job {
	if m != nil {
		return m.ParentJob
	}
	return nil
}

type JobStatus struct {
	// @inject_tag: form:"Name"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" form:"Name"`
	// @inject_tag: form:"Region"
	Region          string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty" form:"Region"`
	SuccessCount    int64  `protobuf:"varint,3,opt,name=SuccessCount,proto3" json:"SuccessCount,omitempty"`
	ErrorCount      int64  `protobuf:"varint,4,opt,name=ErrorCount,proto3" json:"ErrorCount,omitempty"`
	LastHandleAgent string `protobuf:"bytes,5,opt,name=LastHandleAgent,proto3" json:"LastHandleAgent,omitempty"`
	LastSuccess     string `protobuf:"bytes,6,opt,name=LastSuccess,proto3" json:"LastSuccess,omitempty"`
	LastError       string `protobuf:"bytes,7,opt,name=LastError,proto3" json:"LastError,omitempty"`
}

func (m *JobStatus) Reset()                    { *m = JobStatus{} }
func (m *JobStatus) String() string            { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()               {}
func (*JobStatus) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{4} }

func (m *JobStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobStatus) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *JobStatus) GetSuccessCount() int64 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *JobStatus) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *JobStatus) GetLastHandleAgent() string {
	if m != nil {
		return m.LastHandleAgent
	}
	return ""
}

func (m *JobStatus) GetLastSuccess() string {
	if m != nil {
		return m.LastSuccess
	}
	return ""
}

func (m *JobStatus) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

type Execution struct {
	// @inject_tag: gorm:"type:varchar(64);not null"
	SchedulerNodeName string `protobuf:"bytes,1,opt,name=SchedulerNodeName,proto3" json:"SchedulerNodeName,omitempty" gorm:"type:varchar(64);not null"`
	// @inject_tag: gorm:"type:blob"
	Output []byte `protobuf:"bytes,2,opt,name=Output,proto3" json:"Output,omitempty" gorm:"type:blob"`
	// @inject_tag: gorm:"type:tinyint(4)"
	Succeed bool `protobuf:"varint,3,opt,name=Succeed,proto3" json:"Succeed,omitempty" gorm:"type:tinyint(4)"`
	// @inject_tag: gorm:"type:bigint(21);not null"
	StartTime int64 `protobuf:"varint,4,opt,name=StartTime,proto3" json:"StartTime,omitempty" gorm:"type:bigint(21);not null"`
	// @inject_tag: gorm:"type:bigint(21);not null"
	FinishTime int64 `protobuf:"varint,5,opt,name=FinishTime,proto3" json:"FinishTime,omitempty" gorm:"type:bigint(21);not null"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"Name"
	Name string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty" gorm:"type:varchar(64);primary_key;not null" form:"Name"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"Rgion"
	Region string `protobuf:"bytes,7,opt,name=Region,proto3" json:"Region,omitempty" gorm:"type:varchar(64);primary_key;not null" form:"Rgion"`
	// @inject_tag: gorm:"type:int(11);not null"
	Retries int64 `protobuf:"varint,8,opt,name=Retries,proto3" json:"Retries,omitempty" gorm:"type:int(11);not null"`
	// @inject_tag: gorm:"type:bigint(21);primary_key;not null" form:"Group"
	Group int64 `protobuf:"varint,9,opt,name=Group,proto3" json:"Group,omitempty" gorm:"type:bigint(21);primary_key;not null" form:"Group"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null" form:"NodeName"
	RunNodeName string `protobuf:"bytes,10,opt,name=RunNodeName,proto3" json:"RunNodeName,omitempty" gorm:"type:varchar(64);primary_key;not null" form:"NodeName"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptorJob, []int{5} }

func (m *Execution) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

func (m *Execution) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Execution) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *Execution) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Execution) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *Execution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Execution) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Execution) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Execution) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Execution) GetRunNodeName() string {
	if m != nil {
		return m.RunNodeName
	}
	return ""
}

func init() {
	proto.RegisterType((*Search)(nil), "message.Search")
	proto.RegisterType((*Params)(nil), "message.Params")
	proto.RegisterType((*Result)(nil), "message.Result")
	proto.RegisterType((*Job)(nil), "message.Job")
	proto.RegisterType((*JobStatus)(nil), "message.JobStatus")
	proto.RegisterType((*Execution)(nil), "message.Execution")
	proto.RegisterEnum("message.Ops", Ops_name, Ops_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	GetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DoOps(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) GetJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/message.job/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/message.job/ExecDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) DoOps(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/message.job/DoOps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	GetJob(context.Context, *Job) (*Job, error)
	ExecDone(context.Context, *Execution) (*google_protobuf1.Empty, error)
	DoOps(context.Context, *Params) (*Result, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ExecDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ExecDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/ExecDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ExecDone(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_DoOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).DoOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/DoOps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).DoOps(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Job_GetJob_Handler,
		},
		{
			MethodName: "ExecDone",
			Handler:    _Job_ExecDone_Handler,
		},
		{
			MethodName: "DoOps",
			Handler:    _Job_DoOps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/job.proto",
}

func (m *Search) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Search) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, s := range m.Conditions {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Links) > 0 {
		for _, s := range m.Links {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.PageSize))
	}
	if m.Count {
		dAtA[i] = 0x28
		i++
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Obj != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Obj.Size()))
		n1, err := m.Obj.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Ops != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Ops))
	}
	if m.Search != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Search.Size()))
		n2, err := m.Search.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Succeed {
		dAtA[i] = 0x8
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxPageNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.MaxPageNum))
	}
	if len(m.Objs) > 0 {
		for _, msg := range m.Objs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintJob(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.Schedule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Schedule)))
		i += copy(dAtA[i:], m.Schedule)
	}
	if m.Shell {
		dAtA[i] = 0x20
		i++
		if m.Shell {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Expression) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Expression)))
		i += copy(dAtA[i:], m.Expression)
	}
	if m.Idempotent {
		dAtA[i] = 0x38
		i++
		if m.Idempotent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Disable {
		dAtA[i] = 0x40
		i++
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SchedulerNodeName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.SchedulerNodeName)))
		i += copy(dAtA[i:], m.SchedulerNodeName)
	}
	if m.Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Id))
	}
	if m.ParentJob != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.ParentJob.Size()))
		n3, err := m.ParentJob.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *JobStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if m.SuccessCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.SuccessCount))
	}
	if m.ErrorCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.ErrorCount))
	}
	if len(m.LastHandleAgent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.LastHandleAgent)))
		i += copy(dAtA[i:], m.LastHandleAgent)
	}
	if len(m.LastSuccess) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.LastSuccess)))
		i += copy(dAtA[i:], m.LastSuccess)
	}
	if len(m.LastError) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.LastError)))
		i += copy(dAtA[i:], m.LastError)
	}
	return i, nil
}

func (m *Execution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Execution) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SchedulerNodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.SchedulerNodeName)))
		i += copy(dAtA[i:], m.SchedulerNodeName)
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if m.Succeed {
		dAtA[i] = 0x18
		i++
		if m.Succeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.FinishTime))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if m.Retries != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Retries))
	}
	if m.Group != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintJob(dAtA, i, uint64(m.Group))
	}
	if len(m.RunNodeName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintJob(dAtA, i, uint64(len(m.RunNodeName)))
		i += copy(dAtA[i:], m.RunNodeName)
	}
	return i, nil
}

func encodeFixed64Job(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Job(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintJob(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Search) Size() (n int) {
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, s := range m.Conditions {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	if len(m.Links) > 0 {
		for _, s := range m.Links {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	if m.PageNum != 0 {
		n += 1 + sovJob(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovJob(uint64(m.PageSize))
	}
	if m.Count {
		n += 2
	}
	return n
}

func (m *Params) Size() (n int) {
	var l int
	_ = l
	if m.Obj != nil {
		l = m.Obj.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Ops != 0 {
		n += 1 + sovJob(uint64(m.Ops))
	}
	if m.Search != nil {
		l = m.Search.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func (m *Result) Size() (n int) {
	var l int
	_ = l
	if m.Succeed {
		n += 2
	}
	if m.MaxPageNum != 0 {
		n += 1 + sovJob(uint64(m.MaxPageNum))
	}
	if len(m.Objs) > 0 {
		for _, e := range m.Objs {
			l = e.Size()
			n += 1 + l + sovJob(uint64(l))
		}
	}
	return n
}

func (m *Job) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Schedule)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Shell {
		n += 2
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Idempotent {
		n += 2
	}
	if m.Disable {
		n += 2
	}
	l = len(m.SchedulerNodeName)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovJob(uint64(m.Id))
	}
	if m.ParentJob != nil {
		l = m.ParentJob.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func (m *JobStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.SuccessCount != 0 {
		n += 1 + sovJob(uint64(m.SuccessCount))
	}
	if m.ErrorCount != 0 {
		n += 1 + sovJob(uint64(m.ErrorCount))
	}
	l = len(m.LastHandleAgent)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.LastSuccess)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.LastError)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func (m *Execution) Size() (n int) {
	var l int
	_ = l
	l = len(m.SchedulerNodeName)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Succeed {
		n += 2
	}
	if m.StartTime != 0 {
		n += 1 + sovJob(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovJob(uint64(m.FinishTime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.Retries != 0 {
		n += 1 + sovJob(uint64(m.Retries))
	}
	if m.Group != 0 {
		n += 1 + sovJob(uint64(m.Group))
	}
	l = len(m.RunNodeName)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func sovJob(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJob(x uint64) (n int) {
	return sovJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Search) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Search: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Search: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Obj == nil {
				m.Obj = &google_protobuf2.Any{}
			}
			if err := m.Obj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= (Ops(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Search == nil {
				m.Search = &Search{}
			}
			if err := m.Search.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPageNum", wireType)
			}
			m.MaxPageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPageNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objs = append(m.Objs, &google_protobuf2.Any{})
			if err := m.Objs[len(m.Objs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shell", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shell = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idempotent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Idempotent = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentJob == nil {
				m.ParentJob = &Job{}
			}
			if err := m.ParentJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessCount", wireType)
			}
			m.SuccessCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCount", wireType)
			}
			m.ErrorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHandleAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastHandleAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSuccess", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSuccess = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Execution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Execution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Execution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJob
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJob
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJob(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJob = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJob   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message/job.proto", fileDescriptorJob) }

var fileDescriptorJob = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xf2, 0x46,
	0x14, 0xc5, 0x18, 0x0c, 0xbe, 0xa0, 0x2f, 0x64, 0x14, 0x45, 0x2e, 0x8d, 0x28, 0xf2, 0x22, 0xb5,
	0xd2, 0x8a, 0x54, 0x74, 0xd3, 0x2d, 0x8d, 0x49, 0x0a, 0x4a, 0x42, 0x34, 0x64, 0xd3, 0xe5, 0x18,
	0x4f, 0xc1, 0xd4, 0xf6, 0x58, 0x9e, 0xb1, 0x94, 0xf4, 0x11, 0xba, 0xee, 0x3b, 0xf4, 0x39, 0xba,
	0xeb, 0xb2, 0x8f, 0x50, 0x45, 0xea, 0x7b, 0x54, 0x33, 0xb6, 0xc1, 0xe4, 0x67, 0xf1, 0xed, 0x7c,
	0xce, 0xb9, 0xba, 0x3f, 0xe7, 0x5e, 0x0f, 0x1c, 0x47, 0x94, 0x73, 0xb2, 0xa6, 0x97, 0x5b, 0xe6,
	0x8d, 0x92, 0x94, 0x09, 0x86, 0x5a, 0x05, 0xd5, 0xff, 0x6a, 0xcd, 0xd8, 0x3a, 0xa4, 0x97, 0x8a,
	0xf6, 0xb2, 0x5f, 0x2e, 0x45, 0x10, 0x51, 0x2e, 0x48, 0x94, 0xe4, 0x91, 0xfd, 0x2f, 0x5f, 0x07,
	0xd0, 0x28, 0x11, 0xcf, 0x85, 0xf8, 0xc5, 0x6b, 0x91, 0xc4, 0x85, 0x64, 0xff, 0xae, 0x81, 0xb1,
	0xa4, 0x24, 0x5d, 0x6d, 0xd0, 0x00, 0xe0, 0x8a, 0xc5, 0x7e, 0x20, 0x02, 0x16, 0x73, 0x4b, 0x1b,
	0xea, 0x8e, 0x89, 0x2b, 0x0c, 0x3a, 0x81, 0xe6, 0x6d, 0x10, 0xff, 0xca, 0xad, 0xba, 0x92, 0x72,
	0x80, 0x2c, 0x68, 0x3d, 0x90, 0x35, 0xbd, 0xcf, 0x22, 0x4b, 0x1f, 0x6a, 0x4e, 0x13, 0x97, 0x10,
	0xf5, 0xa1, 0x2d, 0x3f, 0x97, 0xc1, 0x6f, 0xd4, 0x6a, 0x28, 0x69, 0x87, 0x65, 0xae, 0x2b, 0x96,
	0xc5, 0xc2, 0x6a, 0x0e, 0x35, 0xa7, 0x8d, 0x73, 0x60, 0x3f, 0x83, 0xf1, 0x40, 0x52, 0x12, 0x71,
	0x74, 0x0e, 0xfa, 0xc2, 0xdb, 0x5a, 0xda, 0x50, 0x73, 0x3a, 0xe3, 0x93, 0x51, 0xde, 0xff, 0xa8,
	0xec, 0x7f, 0x34, 0x89, 0x9f, 0xb1, 0x0c, 0x40, 0x03, 0xd0, 0x17, 0x89, 0xec, 0x48, 0x73, 0x3e,
	0x8d, 0xbb, 0xa3, 0xc2, 0xae, 0xd1, 0x22, 0xe1, 0x58, 0x0a, 0xe8, 0xeb, 0x72, 0x3a, 0xd5, 0x5c,
	0x67, 0x7c, 0xb4, 0x0b, 0xc9, 0x69, 0x5c, 0xc8, 0x76, 0x08, 0x06, 0xa6, 0x3c, 0x0b, 0x85, 0x1c,
	0x68, 0x99, 0xad, 0x56, 0x94, 0xfa, 0xaa, 0x7c, 0x1b, 0x97, 0x50, 0x1a, 0x74, 0x47, 0x9e, 0xca,
	0x69, 0xeb, 0x6a, 0xa4, 0x0a, 0x83, 0x1c, 0x68, 0x2c, 0xbc, 0x2d, 0xb7, 0xf4, 0xa1, 0xfe, 0x61,
	0xd7, 0x2a, 0xc2, 0xfe, 0xab, 0x0e, 0xfa, 0x9c, 0x79, 0x08, 0x41, 0xe3, 0x9e, 0x44, 0x54, 0x15,
	0x32, 0xb1, 0xfa, 0x46, 0xa7, 0xb2, 0x93, 0x75, 0xc0, 0x62, 0x55, 0xc1, 0xc4, 0x05, 0x92, 0x76,
	0x2e, 0x57, 0x1b, 0xea, 0x67, 0x21, 0x55, 0xc3, 0x98, 0x78, 0x87, 0xa5, 0x9d, 0xcb, 0x0d, 0x0d,
	0x43, 0xe5, 0x73, 0x1b, 0xe7, 0x40, 0x4e, 0x72, 0xc5, 0xa2, 0x88, 0xc4, 0xbe, 0xb2, 0xd9, 0xc4,
	0x25, 0x94, 0x93, 0x4c, 0x9f, 0x92, 0x94, 0x72, 0x2e, 0xeb, 0x18, 0x4a, 0xac, 0x30, 0x52, 0x9f,
	0xf9, 0x34, 0x4a, 0x98, 0xa0, 0xb1, 0xb0, 0x5a, 0x2a, 0x69, 0x85, 0x91, 0x99, 0xdd, 0x80, 0x13,
	0x2f, 0xa4, 0x56, 0x3b, 0xf7, 0xa8, 0x80, 0xe8, 0x5b, 0x38, 0x2e, 0xbb, 0x4a, 0xef, 0x99, 0x4f,
	0xd5, 0x78, 0xa6, 0x2a, 0xf0, 0x56, 0x40, 0x9f, 0xa0, 0x3e, 0xf3, 0x2d, 0x18, 0x6a, 0x8e, 0x8e,
	0xeb, 0x33, 0x1f, 0x5d, 0x80, 0xf9, 0x40, 0x52, 0x1a, 0x8b, 0x39, 0xf3, 0xac, 0x8e, 0xda, 0xd8,
	0x7e, 0xa9, 0x73, 0xe6, 0xe1, 0xbd, 0x6c, 0xff, 0xa7, 0x81, 0x39, 0x67, 0xde, 0x52, 0x10, 0x91,
	0xf1, 0xcf, 0x72, 0xd2, 0x86, 0xae, 0x5a, 0x29, 0xe7, 0xf9, 0x0d, 0xea, 0xaa, 0xfe, 0x01, 0xa7,
	0x1c, 0x4a, 0x53, 0x96, 0xe6, 0x11, 0x0d, 0x15, 0x51, 0x61, 0x90, 0x03, 0x47, 0xb7, 0x84, 0x8b,
	0x9f, 0x48, 0xec, 0x87, 0x74, 0xb2, 0xa6, 0xc5, 0x29, 0x9b, 0xf8, 0x35, 0x8d, 0x86, 0xd0, 0x91,
	0x54, 0x91, 0xbd, 0x30, 0xbb, 0x4a, 0xa1, 0x33, 0x30, 0x25, 0x54, 0xd9, 0x95, 0xd9, 0x26, 0xde,
	0x13, 0xf6, 0x9f, 0x75, 0x30, 0xa7, 0x4f, 0x74, 0x95, 0xc9, 0xbf, 0xf0, 0x7d, 0x7f, 0xb5, 0x8f,
	0xfc, 0x3d, 0x05, 0x63, 0x91, 0x89, 0x24, 0x13, 0xca, 0x81, 0x2e, 0x2e, 0x50, 0xf5, 0xc6, 0xf5,
	0xc3, 0x1b, 0x3f, 0x03, 0x73, 0x29, 0x48, 0x2a, 0x1e, 0x83, 0x88, 0x16, 0x63, 0xef, 0x09, 0xe9,
	0xca, 0x75, 0x10, 0x07, 0x7c, 0xa3, 0xe4, 0x66, 0xee, 0xca, 0x9e, 0xd9, 0x6d, 0xc1, 0x78, 0x77,
	0x0b, 0xad, 0x83, 0x2d, 0x58, 0xd0, 0xc2, 0x54, 0xa4, 0x01, 0xe5, 0xea, 0x86, 0x74, 0x5c, 0x42,
	0x79, 0xcd, 0x37, 0x29, 0xcb, 0x12, 0x75, 0x37, 0x3a, 0xce, 0x81, 0xf4, 0x11, 0x67, 0xf1, 0x6e,
	0x66, 0xc8, 0x7d, 0xac, 0x50, 0x17, 0xdf, 0xa9, 0xc7, 0x00, 0xb5, 0xa1, 0x81, 0xa7, 0x13, 0xb7,
	0x57, 0x43, 0x2d, 0xd0, 0x27, 0xae, 0xdb, 0xd3, 0x10, 0x80, 0x71, 0xb7, 0x70, 0x67, 0xd7, 0x3f,
	0xf7, 0xea, 0xf2, 0xdb, 0x9d, 0xde, 0x4e, 0x1f, 0xa7, 0x3d, 0x7d, 0xfc, 0x87, 0x06, 0xfa, 0x96,
	0x79, 0xe8, 0x1c, 0x8c, 0x1b, 0x2a, 0xaf, 0x0a, 0x1d, 0x9c, 0x5b, 0xff, 0x00, 0xd9, 0x35, 0xf4,
	0x03, 0xb4, 0xe5, 0x2a, 0x5c, 0x16, 0x53, 0x84, 0x76, 0xda, 0x6e, 0x3b, 0xfd, 0xd3, 0x37, 0xff,
	0xfc, 0x54, 0x3e, 0xc3, 0x76, 0x0d, 0x7d, 0x03, 0x4d, 0x97, 0xc9, 0xee, 0xf6, 0x2f, 0x50, 0xfe,
	0xd4, 0xf5, 0xf7, 0x44, 0xfe, 0x00, 0xd9, 0xb5, 0x1f, 0xbb, 0x7f, 0xbf, 0x0c, 0xb4, 0x7f, 0x5e,
	0x06, 0xda, 0xbf, 0x2f, 0x03, 0xcd, 0x33, 0x54, 0xb2, 0xef, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x66, 0xa4, 0x23, 0x80, 0x20, 0x06, 0x00, 0x00,
}

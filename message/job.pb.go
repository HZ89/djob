// Code generated by protoc-gen-go.
// source: job.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Params struct {
	Name   string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Params) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Params) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type Job struct {
	Name               string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Region             string   `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
	Schedule           string   `protobuf:"bytes,3,opt,name=schedule" json:"schedule,omitempty"`
	Shell              bool     `protobuf:"varint,4,opt,name=Shell" json:"Shell,omitempty"`
	Command            string   `protobuf:"bytes,5,opt,name=Command" json:"Command,omitempty"`
	Expression         string   `protobuf:"bytes,6,opt,name=Expression" json:"Expression,omitempty"`
	BeingDependentJobs []string `protobuf:"bytes,7,rep,name=BeingDependentJobs" json:"BeingDependentJobs,omitempty"`
	ParentJob          string   `protobuf:"bytes,8,opt,name=ParentJob" json:"ParentJob,omitempty"`
	Parallel           bool     `protobuf:"varint,9,opt,name=Parallel" json:"Parallel,omitempty"`
	Concurrent         bool     `protobuf:"varint,10,opt,name=Concurrent" json:"Concurrent,omitempty"`
	Disable            bool     `protobuf:"varint,11,opt,name=Disable" json:"Disable,omitempty"`
	SchedulerNodeName  string   `protobuf:"bytes,12,opt,name=SchedulerNodeName" json:"SchedulerNodeName,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetShell() bool {
	if m != nil {
		return m.Shell
	}
	return false
}

func (m *Job) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Job) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *Job) GetBeingDependentJobs() []string {
	if m != nil {
		return m.BeingDependentJobs
	}
	return nil
}

func (m *Job) GetParentJob() string {
	if m != nil {
		return m.ParentJob
	}
	return ""
}

func (m *Job) GetParallel() bool {
	if m != nil {
		return m.Parallel
	}
	return false
}

func (m *Job) GetConcurrent() bool {
	if m != nil {
		return m.Concurrent
	}
	return false
}

func (m *Job) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Job) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

type JobStatus struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	SuccessCount    int64  `protobuf:"varint,2,opt,name=SuccessCount" json:"SuccessCount,omitempty"`
	ErrorCount      int64  `protobuf:"varint,3,opt,name=ErrorCount" json:"ErrorCount,omitempty"`
	LastHandleAgent string `protobuf:"bytes,4,opt,name=LastHandleAgent" json:"LastHandleAgent,omitempty"`
	LastSuccess     string `protobuf:"bytes,5,opt,name=LastSuccess" json:"LastSuccess,omitempty"`
	LastError       string `protobuf:"bytes,6,opt,name=LastError" json:"LastError,omitempty"`
}

func (m *JobStatus) Reset()                    { *m = JobStatus{} }
func (m *JobStatus) String() string            { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()               {}
func (*JobStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *JobStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobStatus) GetSuccessCount() int64 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *JobStatus) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *JobStatus) GetLastHandleAgent() string {
	if m != nil {
		return m.LastHandleAgent
	}
	return ""
}

func (m *JobStatus) GetLastSuccess() string {
	if m != nil {
		return m.LastSuccess
	}
	return ""
}

func (m *JobStatus) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

type Execution struct {
	// @inject_tag: gorm:"type:varchar(64);not null"
	SchedulerNodeName string `protobuf:"bytes,1,opt,name=SchedulerNodeName" json:"SchedulerNodeName,omitempty" gorm:"type:varchar(64);not null"`
	// @inject_tag: gorm:"type:blob"
	Output []byte `protobuf:"bytes,2,opt,name=Output,proto3" json:"Output,omitempty" gorm:"type:blob"`
	// @inject_tag: gorm:"type:tinyint(4)"
	Succeed bool `protobuf:"varint,3,opt,name=Succeed" json:"Succeed,omitempty" gorm:"type:tinyint(4)"`
	// @inject_tag: gorm:"type:bigint(21);not null"
	StartTime int64 `protobuf:"varint,4,opt,name=StartTime" json:"StartTime,omitempty" gorm:"type:bigint(21);not null"`
	// @inject_tag: gorm:"type:bigint(21);not null"
	FinishTime int64 `protobuf:"varint,5,opt,name=FinishTime" json:"FinishTime,omitempty" gorm:"type:bigint(21);not null"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null"
	JobName string `protobuf:"bytes,6,opt,name=JobName" json:"JobName,omitempty" gorm:"type:varchar(64);primary_key;not null"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null"
	Region string `protobuf:"bytes,7,opt,name=Region" json:"Region,omitempty" gorm:"type:varchar(64);primary_key;not null"`
	// @inject_tag: gorm:"type:int(11);not null"
	Retries int64 `protobuf:"varint,8,opt,name=Retries" json:"Retries,omitempty" gorm:"type:int(11);not null"`
	// @inject_tag: gorm:"type:bigint(21);primary_key;not null"
	Group int64 `protobuf:"varint,9,opt,name=Group" json:"Group,omitempty" gorm:"type:bigint(21);primary_key;not null"`
	// @inject_tag: gorm:"type:varchar(64);primary_key;not null"
	RunNodeName string `protobuf:"bytes,10,opt,name=RunNodeName" json:"RunNodeName,omitempty" gorm:"type:varchar(64);primary_key;not null"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Execution) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

func (m *Execution) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Execution) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *Execution) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Execution) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *Execution) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *Execution) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Execution) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Execution) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Execution) GetRunNodeName() string {
	if m != nil {
		return m.RunNodeName
	}
	return ""
}

type Result struct {
	Status  int32  `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Result) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "message.Params")
	proto.RegisterType((*Job)(nil), "message.Job")
	proto.RegisterType((*JobStatus)(nil), "message.JobStatus")
	proto.RegisterType((*Execution)(nil), "message.Execution")
	proto.RegisterType((*Result)(nil), "message.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	GetJob(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Job, error)
	ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) GetJob(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/message.job/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/message.job/ExecDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	GetJob(context.Context, *Params) (*Job, error)
	ExecDone(context.Context, *Execution) (*google_protobuf1.Empty, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetJob(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ExecDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ExecDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/ExecDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ExecDone(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Job_GetJob_Handler,
		},
		{
			MethodName: "ExecDone",
			Handler:    _Job_ExecDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0x6e, 0xe2, 0xfc, 0x79, 0x1a, 0xa9, 0x62, 0x85, 0x2a, 0x2b, 0x20, 0x88, 0xfc, 0x54, 0x24,
	0xe4, 0x4a, 0xc0, 0x03, 0xe2, 0x0d, 0x92, 0x50, 0x84, 0xa0, 0x20, 0x87, 0x0b, 0x38, 0xc9, 0xe0,
	0xb8, 0xb2, 0xbd, 0x96, 0xbd, 0x2b, 0x95, 0x43, 0x71, 0x14, 0xce, 0xc2, 0x15, 0xd8, 0x99, 0xb5,
	0x1d, 0xb7, 0x84, 0x07, 0xde, 0xfc, 0x7d, 0xdf, 0x7a, 0x67, 0xe6, 0x9b, 0xd9, 0x01, 0xf7, 0x46,
	0x6e, 0x82, 0xa2, 0x94, 0x4a, 0x8a, 0x71, 0x86, 0x55, 0x15, 0xc5, 0x38, 0x7b, 0x1a, 0x4b, 0x19,
	0xa7, 0x78, 0xc9, 0xf4, 0x46, 0x7f, 0xbf, 0x54, 0x89, 0x91, 0x54, 0x94, 0x15, 0xf6, 0xe4, 0xec,
	0xd1, 0xfd, 0x03, 0x98, 0x15, 0xea, 0x87, 0x15, 0xfd, 0x57, 0x30, 0xfa, 0x1a, 0x95, 0x51, 0x56,
	0x09, 0x01, 0x83, 0xeb, 0x28, 0x43, 0xaf, 0x37, 0xef, 0x5d, 0xb8, 0x21, 0x7f, 0x8b, 0x73, 0x18,
	0x85, 0x18, 0x27, 0x32, 0xf7, 0xfa, 0xcc, 0xd6, 0xc8, 0xff, 0xdd, 0x07, 0xe7, 0xa3, 0xdc, 0xfc,
	0xcf, 0x3f, 0x62, 0x06, 0x93, 0x6a, 0xbb, 0xc7, 0x9d, 0x4e, 0xd1, 0x73, 0x58, 0x69, 0xb1, 0x78,
	0x08, 0xc3, 0xf5, 0x1e, 0xd3, 0xd4, 0x1b, 0x18, 0x61, 0x12, 0x5a, 0x20, 0x3c, 0x18, 0x2f, 0x64,
	0x96, 0x45, 0xf9, 0xce, 0x1b, 0xf2, 0x0f, 0x0d, 0x14, 0x4f, 0x00, 0x56, 0xb7, 0x45, 0x69, 0x1c,
	0xa0, 0x38, 0x23, 0x16, 0x3b, 0x8c, 0x08, 0x40, 0xbc, 0xc3, 0x24, 0x8f, 0x97, 0x58, 0x60, 0xbe,
	0xc3, 0x5c, 0x99, 0x64, 0x2b, 0x6f, 0x3c, 0x77, 0xcc, 0xb9, 0x23, 0x8a, 0x78, 0x0c, 0xae, 0x71,
	0xc1, 0x22, 0x6f, 0xc2, 0xd7, 0x1d, 0x08, 0xca, 0x9c, 0x3c, 0x4a, 0x53, 0x4c, 0x3d, 0x97, 0x13,
	0x6c, 0x31, 0x65, 0xb2, 0x90, 0xf9, 0x56, 0x97, 0x74, 0xd8, 0x03, 0x56, 0x3b, 0x0c, 0xd5, 0xb0,
	0x4c, 0xaa, 0x68, 0x63, 0x8a, 0x3e, 0x65, 0xb1, 0x81, 0xe2, 0x39, 0x3c, 0x58, 0xd7, 0xf5, 0x97,
	0xd7, 0x72, 0x87, 0x6c, 0xe4, 0x94, 0x63, 0xff, 0x2d, 0xf8, 0xbf, 0x7a, 0xe0, 0x9a, 0x5c, 0xd6,
	0x2a, 0x52, 0xfa, 0x78, 0xaf, 0x7c, 0x98, 0xae, 0xf5, 0x76, 0x6b, 0x1c, 0x58, 0x48, 0x6d, 0x72,
	0x21, 0xf7, 0x9d, 0xf0, 0x0e, 0xc7, 0xbe, 0x95, 0xa5, 0x2c, 0xed, 0x09, 0x87, 0x4f, 0x74, 0x18,
	0x71, 0x01, 0x67, 0x9f, 0xa2, 0x4a, 0x7d, 0x30, 0x1e, 0xa7, 0xf8, 0x36, 0xa6, 0x92, 0x06, 0x1c,
	0xe2, 0x3e, 0x2d, 0xe6, 0x70, 0x4a, 0x54, 0x7d, 0x7b, 0xdd, 0x9f, 0x2e, 0x45, 0x9e, 0x12, 0xe4,
	0xdb, 0xeb, 0x16, 0x1d, 0x08, 0xff, 0x67, 0x1f, 0xdc, 0xd5, 0x2d, 0x6e, 0xb5, 0xa2, 0x7e, 0x1d,
	0xf5, 0xa2, 0xf7, 0x0f, 0x2f, 0x68, 0xc2, 0xbe, 0x68, 0x55, 0x68, 0x5b, 0xe3, 0x34, 0xac, 0x11,
	0x79, 0xcd, 0xc1, 0x71, 0xc7, 0xa5, 0x19, 0xaf, 0x6b, 0x48, 0xb9, 0x18, 0xe7, 0x4a, 0xf5, 0xcd,
	0x3c, 0x0d, 0xae, 0xc8, 0x09, 0x0f, 0x04, 0xb9, 0xf2, 0x3e, 0xc9, 0x93, 0x6a, 0xcf, 0xf2, 0xd0,
	0xba, 0x72, 0x60, 0xe8, 0x5e, 0x63, 0x3d, 0xe7, 0x64, 0xeb, 0x68, 0x60, 0x67, 0xd6, 0xc7, 0x77,
	0x66, 0xdd, 0xfc, 0x11, 0xa2, 0x2a, 0x13, 0xac, 0x78, 0x9a, 0x9c, 0xb0, 0x81, 0x34, 0xe9, 0x57,
	0xa5, 0xd4, 0x05, 0x0f, 0x92, 0x13, 0x5a, 0x40, 0x6e, 0x86, 0x3a, 0x6f, 0x2b, 0x07, 0xeb, 0x66,
	0x87, 0xf2, 0xdf, 0x50, 0xa4, 0x4a, 0xa7, 0x8a, 0x62, 0xda, 0x29, 0x60, 0x83, 0x86, 0x61, 0x8d,
	0x28, 0xe6, 0x67, 0xbb, 0x12, 0xea, 0x87, 0xd7, 0xc0, 0x17, 0x37, 0xe0, 0x98, 0xbd, 0x21, 0x9e,
	0xc1, 0xe8, 0x0a, 0x79, 0xa0, 0xcf, 0x82, 0x7a, 0x79, 0x04, 0xf6, 0xed, 0xcf, 0xa6, 0x2d, 0x61,
	0x64, 0xff, 0x44, 0xbc, 0x86, 0x09, 0x35, 0x67, 0x29, 0x73, 0x14, 0xa2, 0xd5, 0xda, 0x7e, 0xcd,
	0xce, 0x03, 0xbb, 0x53, 0x82, 0x66, 0xa7, 0x04, 0x2b, 0xda, 0x29, 0xfe, 0xc9, 0x66, 0xc4, 0xcc,
	0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x6b, 0xa0, 0xb4, 0xaa, 0x04, 0x00, 0x00,
}

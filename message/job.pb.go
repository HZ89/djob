// Code generated by protoc-gen-go.
// source: job.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	job.proto

It has these top-level messages:
	Name
	Job
	Execution
	Result
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Name struct {
	JobName string `protobuf:"bytes,1,opt,name=jobName" json:"jobName,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Name) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type Job struct {
	Name               string                     `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Region             string                     `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
	Shell              bool                       `protobuf:"varint,3,opt,name=Shell" json:"Shell,omitempty"`
	Command            string                     `protobuf:"bytes,4,opt,name=Command" json:"Command,omitempty"`
	SuccessCount       int64                      `protobuf:"varint,5,opt,name=SuccessCount" json:"SuccessCount,omitempty"`
	ErrorCount         int64                      `protobuf:"varint,6,opt,name=ErrorCount" json:"ErrorCount,omitempty"`
	LastSuccess        *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=LastSuccess" json:"LastSuccess,omitempty"`
	LastError          *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=LastError" json:"LastError,omitempty"`
	Expression         string                     `protobuf:"bytes,9,opt,name=Expression" json:"Expression,omitempty"`
	Retries            int64                      `protobuf:"varint,10,opt,name=Retries" json:"Retries,omitempty"`
	BeingDependentJobs []string                   `protobuf:"bytes,11,rep,name=BeingDependentJobs" json:"BeingDependentJobs,omitempty"`
	ParentJob          string                     `protobuf:"bytes,12,opt,name=ParentJob" json:"ParentJob,omitempty"`
	Parallel           bool                       `protobuf:"varint,13,opt,name=Parallel" json:"Parallel,omitempty"`
	Concurrent         bool                       `protobuf:"varint,14,opt,name=Concurrent" json:"Concurrent,omitempty"`
	LastHandleAgent    string                     `protobuf:"bytes,15,opt,name=LastHandleAgent" json:"LastHandleAgent,omitempty"`
	Disposable         bool                       `protobuf:"varint,16,opt,name=Disposable" json:"Disposable,omitempty"`
	SchedulerNodeName  string                     `protobuf:"bytes,17,opt,name=SchedulerNodeName" json:"SchedulerNodeName,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Job) GetShell() bool {
	if m != nil {
		return m.Shell
	}
	return false
}

func (m *Job) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Job) GetSuccessCount() int64 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *Job) GetErrorCount() int64 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *Job) GetLastSuccess() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastSuccess
	}
	return nil
}

func (m *Job) GetLastError() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastError
	}
	return nil
}

func (m *Job) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *Job) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Job) GetBeingDependentJobs() []string {
	if m != nil {
		return m.BeingDependentJobs
	}
	return nil
}

func (m *Job) GetParentJob() string {
	if m != nil {
		return m.ParentJob
	}
	return ""
}

func (m *Job) GetParallel() bool {
	if m != nil {
		return m.Parallel
	}
	return false
}

func (m *Job) GetConcurrent() bool {
	if m != nil {
		return m.Concurrent
	}
	return false
}

func (m *Job) GetLastHandleAgent() string {
	if m != nil {
		return m.LastHandleAgent
	}
	return ""
}

func (m *Job) GetDisposable() bool {
	if m != nil {
		return m.Disposable
	}
	return false
}

func (m *Job) GetSchedulerNodeName() string {
	if m != nil {
		return m.SchedulerNodeName
	}
	return ""
}

type Execution struct {
	Name       string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cmd        string                     `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
	Output     string                     `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	Succeed    bool                       `protobuf:"varint,4,opt,name=succeed" json:"succeed,omitempty"`
	StartTime  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	FinishTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=finishTime" json:"finishTime,omitempty"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Execution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Execution) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Execution) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Execution) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *Execution) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Execution) GetFinishTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

type Result struct {
	Err bool `protobuf:"varint,1,opt,name=err" json:"err,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetErr() bool {
	if m != nil {
		return m.Err
	}
	return false
}

func init() {
	proto.RegisterType((*Name)(nil), "message.Name")
	proto.RegisterType((*Job)(nil), "message.Job")
	proto.RegisterType((*Execution)(nil), "message.Execution")
	proto.RegisterType((*Result)(nil), "message.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	GetJob(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Job, error)
	ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*Result, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) GetJob(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/message.job/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) ExecDone(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/message.job/ExecDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	GetJob(context.Context, *Name) (*Job, error)
	ExecDone(context.Context, *Execution) (*Result, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).GetJob(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_ExecDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).ExecDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.job/ExecDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).ExecDone(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Job_GetJob_Handler,
		},
		{
			MethodName: "ExecDone",
			Handler:    _Job_ExecDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}

func init() { proto.RegisterFile("job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xde, 0x48, 0xd7, 0x26, 0xd7, 0x8e, 0x6e, 0x16, 0x42, 0x56, 0x84, 0xa0, 0xca, 0x0b, 0x7b,
	0x40, 0x99, 0x18, 0x2f, 0x08, 0xf1, 0x02, 0xed, 0x04, 0x42, 0x68, 0x42, 0x29, 0xff, 0x40, 0x9a,
	0xde, 0xd2, 0xa0, 0x24, 0x8e, 0x6c, 0x47, 0xda, 0xbf, 0xba, 0xff, 0x06, 0x9f, 0x9d, 0xa6, 0xe1,
	0x87, 0xd4, 0x37, 0x7f, 0xdf, 0x7d, 0x77, 0xf6, 0x7d, 0x77, 0x86, 0xe0, 0x97, 0xd8, 0xc4, 0x8d,
	0x14, 0x5a, 0xb0, 0x49, 0x85, 0x4a, 0xa5, 0x39, 0x86, 0xaf, 0x72, 0x21, 0xf2, 0x12, 0xaf, 0x2d,
	0xbd, 0x69, 0xef, 0xaf, 0x75, 0x61, 0x42, 0x3a, 0xad, 0x1a, 0xa7, 0x8c, 0x16, 0x30, 0xba, 0x4b,
	0x2b, 0x64, 0x1c, 0x26, 0x26, 0x9d, 0x8e, 0xfc, 0x74, 0x71, 0x7a, 0x15, 0x24, 0x7b, 0x18, 0x3d,
	0x8e, 0xc0, 0xfb, 0x26, 0x36, 0x8c, 0x39, 0x65, 0x17, 0x76, 0x59, 0xcf, 0x61, 0x9c, 0x60, 0x5e,
	0x88, 0x9a, 0x3f, 0xb1, 0x6c, 0x87, 0xd8, 0x33, 0x38, 0x5b, 0xef, 0xb0, 0x2c, 0xb9, 0x67, 0x68,
	0x3f, 0x71, 0x80, 0xee, 0x58, 0x8a, 0xaa, 0x4a, 0xeb, 0x2d, 0x1f, 0xb9, 0x3b, 0x3a, 0xc8, 0x22,
	0x98, 0xad, 0xdb, 0x2c, 0x33, 0x8f, 0x5e, 0x8a, 0xb6, 0xd6, 0xfc, 0xcc, 0x84, 0xbd, 0xe4, 0x0f,
	0x8e, 0xbd, 0x04, 0xb8, 0x95, 0x52, 0x48, 0xa7, 0x18, 0x5b, 0xc5, 0x80, 0x61, 0x1f, 0x61, 0xfa,
	0x3d, 0x55, 0xba, 0xcb, 0xe1, 0x13, 0x23, 0x98, 0xde, 0x84, 0xb1, 0x33, 0x20, 0xde, 0x1b, 0x10,
	0xff, 0xdc, 0x1b, 0x90, 0x0c, 0xe5, 0xec, 0x3d, 0x04, 0x04, 0x6d, 0x3d, 0xee, 0x1f, 0xcd, 0x3d,
	0x88, 0xed, 0xbb, 0x1e, 0x1a, 0x69, 0x8a, 0x90, 0x0f, 0x81, 0x6d, 0x6c, 0xc0, 0x50, 0xd7, 0x09,
	0x6a, 0x59, 0xa0, 0xe2, 0x60, 0x1f, 0xbd, 0x87, 0x2c, 0x06, 0xf6, 0x19, 0x8b, 0x3a, 0x5f, 0x61,
	0x83, 0xf5, 0x16, 0x6b, 0x6d, 0x6c, 0x56, 0x7c, 0xba, 0xf0, 0x4c, 0x85, 0xff, 0x44, 0xd8, 0x0b,
	0x08, 0x7e, 0xa4, 0xd2, 0x21, 0x3e, 0xb3, 0x17, 0x1d, 0x08, 0x16, 0x82, 0x6f, 0x40, 0x5a, 0x96,
	0x58, 0xf2, 0x73, 0x6b, 0x7b, 0x8f, 0xe9, 0x8d, 0x4b, 0x51, 0x67, 0xad, 0x24, 0x31, 0x7f, 0x6a,
	0xa3, 0x03, 0x86, 0x5d, 0xc1, 0x9c, 0x1a, 0xfa, 0x6a, 0x66, 0x51, 0xe2, 0xa7, 0x9c, 0x44, 0x73,
	0x5b, 0xff, 0x6f, 0x9a, 0x2a, 0xad, 0x0a, 0xd5, 0x08, 0x95, 0x6e, 0x4a, 0xe4, 0x17, 0xae, 0xd2,
	0x81, 0x61, 0x6f, 0xe0, 0x72, 0x9d, 0xed, 0x70, 0xdb, 0x96, 0x28, 0xef, 0xc4, 0x16, 0xed, 0xca,
	0x5c, 0xda, 0x5a, 0xff, 0x06, 0xa2, 0xc7, 0x53, 0x08, 0x6e, 0x1f, 0x30, 0x6b, 0x35, 0x39, 0x65,
	0x36, 0xac, 0x1e, 0x6c, 0x18, 0x9d, 0xd9, 0x05, 0x78, 0x59, 0xb5, 0xed, 0xd6, 0x8b, 0x8e, 0xb4,
	0x73, 0xa2, 0xd5, 0x4d, 0xab, 0xed, 0x72, 0x99, 0x9d, 0x73, 0x88, 0x7c, 0x56, 0x34, 0x4c, 0x74,
	0xdb, 0xe5, 0x27, 0x7b, 0x48, 0xb3, 0x35, 0x53, 0x93, 0x9a, 0xc6, 0x67, 0x57, 0xeb, 0xc8, 0x6c,
	0x7b, 0x31, 0xfb, 0x00, 0x70, 0x5f, 0xd4, 0x85, 0xda, 0xd9, 0xd4, 0xf1, 0xd1, 0xd4, 0x81, 0x3a,
	0x0a, 0xe9, 0x6f, 0xa8, 0xb6, 0xd4, 0xd4, 0x03, 0x4a, 0x69, 0xdb, 0xf2, 0x13, 0x3a, 0xde, 0xa4,
	0xe0, 0x99, 0xef, 0xc5, 0x5e, 0xc3, 0xf8, 0x0b, 0xda, 0xe1, 0x9d, 0xc7, 0xdd, 0x8f, 0x8d, 0xc9,
	0x97, 0x70, 0xd6, 0x43, 0x13, 0x8c, 0x4e, 0xd8, 0x5b, 0xf0, 0xc9, 0xa6, 0x95, 0xa8, 0x91, 0xb1,
	0x3e, 0xd6, 0x3b, 0x17, 0xce, 0x7b, 0xce, 0x5d, 0x19, 0x9d, 0x6c, 0xc6, 0xf6, 0x79, 0xef, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x47, 0x5b, 0x42, 0x16, 0x04, 0x00, 0x00,
}

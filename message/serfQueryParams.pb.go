// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message/serfQueryParams.proto

package message

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobQueryParams struct {
	Name           string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Region         string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	SourceNodeName string `protobuf:"bytes,3,opt,name=SourceNodeName,proto3" json:"SourceNodeName,omitempty"`
	DistNodeName   string `protobuf:"bytes,4,opt,name=DistNodeName,proto3" json:"DistNodeName,omitempty"`
}

func (m *JobQueryParams) Reset()                    { *m = JobQueryParams{} }
func (m *JobQueryParams) String() string            { return proto.CompactTextString(m) }
func (*JobQueryParams) ProtoMessage()               {}
func (*JobQueryParams) Descriptor() ([]byte, []int) { return fileDescriptorSerfQueryParams, []int{0} }

func (m *JobQueryParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobQueryParams) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *JobQueryParams) GetSourceNodeName() string {
	if m != nil {
		return m.SourceNodeName
	}
	return ""
}

func (m *JobQueryParams) GetDistNodeName() string {
	if m != nil {
		return m.DistNodeName
	}
	return ""
}

type GetRPCConfigResp struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *GetRPCConfigResp) Reset()                    { *m = GetRPCConfigResp{} }
func (m *GetRPCConfigResp) String() string            { return proto.CompactTextString(m) }
func (*GetRPCConfigResp) ProtoMessage()               {}
func (*GetRPCConfigResp) Descriptor() ([]byte, []int) { return fileDescriptorSerfQueryParams, []int{1} }

func (m *GetRPCConfigResp) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetRPCConfigResp) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type JobCountResp struct {
	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *JobCountResp) Reset()                    { *m = JobCountResp{} }
func (m *JobCountResp) String() string            { return proto.CompactTextString(m) }
func (*JobCountResp) ProtoMessage()               {}
func (*JobCountResp) Descriptor() ([]byte, []int) { return fileDescriptorSerfQueryParams, []int{2} }

func (m *JobCountResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobCountResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryResult struct {
	Status  int32  `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptorSerfQueryParams, []int{3} }

func (m *QueryResult) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryResult) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *QueryResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*JobQueryParams)(nil), "message.JobQueryParams")
	proto.RegisterType((*GetRPCConfigResp)(nil), "message.GetRPCConfigResp")
	proto.RegisterType((*JobCountResp)(nil), "message.JobCountResp")
	proto.RegisterType((*QueryResult)(nil), "message.QueryResult")
}
func (m *JobQueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobQueryParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.SourceNodeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.SourceNodeName)))
		i += copy(dAtA[i:], m.SourceNodeName)
	}
	if len(m.DistNodeName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.DistNodeName)))
		i += copy(dAtA[i:], m.DistNodeName)
	}
	return i, nil
}

func (m *GetRPCConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRPCConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *JobCountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCountResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *QueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(m.Status))
	}
	if len(m.Node) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSerfQueryParams(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeFixed64SerfQueryParams(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SerfQueryParams(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSerfQueryParams(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JobQueryParams) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	l = len(m.SourceNodeName)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	l = len(m.DistNodeName)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	return n
}

func (m *GetRPCConfigResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovSerfQueryParams(uint64(m.Port))
	}
	return n
}

func (m *JobCountResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovSerfQueryParams(uint64(m.Count))
	}
	return n
}

func (m *QueryResult) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSerfQueryParams(uint64(m.Status))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSerfQueryParams(uint64(l))
	}
	return n
}

func sovSerfQueryParams(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSerfQueryParams(x uint64) (n int) {
	return sovSerfQueryParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobQueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerfQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobQueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobQueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerfQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRPCConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerfQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRPCConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRPCConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSerfQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerfQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSerfQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSerfQueryParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSerfQueryParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSerfQueryParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSerfQueryParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSerfQueryParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSerfQueryParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSerfQueryParams
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSerfQueryParams
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSerfQueryParams(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSerfQueryParams = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSerfQueryParams   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message/serfQueryParams.proto", fileDescriptorSerfQueryParams) }

var fileDescriptorSerfQueryParams = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xcd, 0x4a, 0xc3, 0x40,
	0x18, 0x64, 0xd3, 0xa6, 0xc5, 0xcf, 0x10, 0x64, 0x11, 0xc9, 0xc5, 0x20, 0x39, 0x88, 0x27, 0x3d,
	0x08, 0xe2, 0xd9, 0x08, 0x42, 0xc1, 0x52, 0x37, 0x4f, 0x90, 0xd8, 0xaf, 0x21, 0x60, 0xf2, 0x2d,
	0xfb, 0x73, 0xf0, 0x0d, 0x7c, 0x34, 0x8f, 0x3e, 0x82, 0xe4, 0x49, 0xa4, 0x5f, 0x57, 0x51, 0xe9,
	0x6d, 0x66, 0x76, 0x66, 0x99, 0xf9, 0xe0, 0xb4, 0x47, 0x6b, 0xeb, 0x16, 0xaf, 0x2c, 0x9a, 0xcd,
	0x93, 0x47, 0xf3, 0xba, 0xaa, 0x4d, 0xdd, 0xdb, 0x4b, 0x6d, 0xc8, 0x91, 0x9c, 0x87, 0xe7, 0xe2,
	0x4d, 0x40, 0xba, 0xa0, 0xe6, 0x97, 0x43, 0x4a, 0x98, 0x2e, 0xeb, 0x1e, 0x33, 0x71, 0x26, 0x2e,
	0x0e, 0x14, 0x63, 0x79, 0x02, 0x33, 0x85, 0x6d, 0x47, 0x43, 0x16, 0xb1, 0x1a, 0x98, 0x3c, 0x87,
	0xb4, 0x22, 0x6f, 0x9e, 0x71, 0x49, 0x6b, 0xe4, 0xd4, 0x84, 0xdf, 0xff, 0xa9, 0xb2, 0x80, 0xe4,
	0xbe, 0xb3, 0xee, 0xc7, 0x35, 0x65, 0xd7, 0x1f, 0xad, 0xb8, 0x81, 0xa3, 0x07, 0x74, 0x6a, 0x55,
	0x96, 0x34, 0x6c, 0xba, 0x56, 0xa1, 0xd5, 0x32, 0x85, 0xa8, 0xd3, 0xa1, 0x49, 0xd4, 0xe9, 0x6d,
	0x37, 0x4d, 0xc6, 0x71, 0x8b, 0x58, 0x31, 0x2e, 0x6e, 0x21, 0x59, 0x50, 0x53, 0x92, 0x1f, 0x1c,
	0x67, 0xf6, 0xf5, 0x3f, 0x86, 0x98, 0x0d, 0x1c, 0x9c, 0xa8, 0x1d, 0x29, 0x2a, 0x38, 0xe4, 0xe1,
	0x0a, 0xad, 0x7f, 0x71, 0xdb, 0x91, 0x95, 0xab, 0x9d, 0xb7, 0x1c, 0x8d, 0x55, 0x60, 0xfc, 0x21,
	0xad, 0x31, 0x4c, 0x67, 0x2c, 0x33, 0x98, 0x3f, 0xee, 0x4e, 0x18, 0x16, 0x7f, 0xd3, 0xbb, 0xe4,
	0x7d, 0xcc, 0xc5, 0xc7, 0x98, 0x8b, 0xcf, 0x31, 0x17, 0xcd, 0x8c, 0xef, 0x7d, 0xfd, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x25, 0xa7, 0x4b, 0x90, 0x01, 0x00, 0x00,
}

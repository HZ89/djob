// Code generated by protoc-gen-go.
// source: serfQueryParams.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewJobQueryParams struct {
	JobName string `protobuf:"bytes,1,opt,name=JobName" json:"JobName,omitempty"`
	Region  string `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
}

func (m *NewJobQueryParams) Reset()                    { *m = NewJobQueryParams{} }
func (m *NewJobQueryParams) String() string            { return proto.CompactTextString(m) }
func (*NewJobQueryParams) ProtoMessage()               {}
func (*NewJobQueryParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewJobQueryParams) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *NewJobQueryParams) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type RunJobQueryParams struct {
	JobName           string `protobuf:"bytes,1,opt,name=JobName" json:"JobName,omitempty"`
	SchedulerNodename string `protobuf:"bytes,2,opt,name=SchedulerNodename" json:"SchedulerNodename,omitempty"`
}

func (m *RunJobQueryParams) Reset()                    { *m = RunJobQueryParams{} }
func (m *RunJobQueryParams) String() string            { return proto.CompactTextString(m) }
func (*RunJobQueryParams) ProtoMessage()               {}
func (*RunJobQueryParams) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RunJobQueryParams) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *RunJobQueryParams) GetSchedulerNodename() string {
	if m != nil {
		return m.SchedulerNodename
	}
	return ""
}

func init() {
	proto.RegisterType((*NewJobQueryParams)(nil), "message.NewJobQueryParams")
	proto.RegisterType((*RunJobQueryParams)(nil), "message.RunJobQueryParams")
}

func init() { proto.RegisterFile("serfQueryParams.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x4a,
	0x0b, 0x2c, 0x4d, 0x2d, 0xaa, 0x0c, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x55, 0x72, 0xe5, 0x12, 0xf4, 0x4b,
	0x2d, 0xf7, 0xca, 0x4f, 0x42, 0x52, 0x23, 0x24, 0xc1, 0xc5, 0x0e, 0x14, 0xf1, 0x4b, 0xcc, 0x4d,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x85, 0xc4, 0xb8, 0xd8, 0x82, 0x52, 0xd3,
	0x33, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0x12, 0x50, 0x9e, 0x52, 0x34, 0x97, 0x60, 0x50, 0x69, 0x1e,
	0xd1, 0xc6, 0xe8, 0x70, 0x09, 0x06, 0x27, 0x67, 0xa4, 0xa6, 0x94, 0xe6, 0xa4, 0x16, 0xf9, 0xe5,
	0xa7, 0xa4, 0xe6, 0x81, 0xd4, 0x40, 0x4c, 0xc4, 0x94, 0x48, 0x62, 0x03, 0xbb, 0xd9, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x1b, 0x29, 0x2b, 0x1a, 0xcc, 0x00, 0x00, 0x00,
}

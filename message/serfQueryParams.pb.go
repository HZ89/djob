// Code generated by protoc-gen-go.
// source: serfQueryParams.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobQueryParams struct {
	Name           string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Region         string `protobuf:"bytes,2,opt,name=Region" json:"Region,omitempty"`
	SourceNodeName string `protobuf:"bytes,3,opt,name=SourceNodeName" json:"SourceNodeName,omitempty"`
	DistNodeName   string `protobuf:"bytes,4,opt,name=DistNodeName" json:"DistNodeName,omitempty"`
}

func (m *JobQueryParams) Reset()                    { *m = JobQueryParams{} }
func (m *JobQueryParams) String() string            { return proto.CompactTextString(m) }
func (*JobQueryParams) ProtoMessage()               {}
func (*JobQueryParams) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *JobQueryParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobQueryParams) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *JobQueryParams) GetSourceNodeName() string {
	if m != nil {
		return m.SourceNodeName
	}
	return ""
}

func (m *JobQueryParams) GetDistNodeName() string {
	if m != nil {
		return m.DistNodeName
	}
	return ""
}

type GetRPCConfigResp struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *GetRPCConfigResp) Reset()                    { *m = GetRPCConfigResp{} }
func (m *GetRPCConfigResp) String() string            { return proto.CompactTextString(m) }
func (*GetRPCConfigResp) ProtoMessage()               {}
func (*GetRPCConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GetRPCConfigResp) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetRPCConfigResp) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type JobCountResp struct {
	Name  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
}

func (m *JobCountResp) Reset()                    { *m = JobCountResp{} }
func (m *JobCountResp) String() string            { return proto.CompactTextString(m) }
func (*JobCountResp) ProtoMessage()               {}
func (*JobCountResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *JobCountResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobCountResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*JobQueryParams)(nil), "message.JobQueryParams")
	proto.RegisterType((*GetRPCConfigResp)(nil), "message.GetRPCConfigResp")
	proto.RegisterType((*JobCountResp)(nil), "message.JobCountResp")
}

func init() { proto.RegisterFile("serfQueryParams.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x4a,
	0x0b, 0x2c, 0x4d, 0x2d, 0xaa, 0x0c, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x55, 0xea, 0x60, 0xe4, 0xe2, 0xf3,
	0xca, 0x4f, 0x42, 0x52, 0x21, 0x24, 0xc4, 0xc5, 0xe2, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0,
	0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x89, 0x71, 0xb1, 0x05, 0xa5, 0xa6, 0x67, 0xe6, 0xe7, 0x49,
	0x30, 0x81, 0x45, 0xa1, 0x3c, 0x21, 0x35, 0x2e, 0xbe, 0xe0, 0xfc, 0xd2, 0xa2, 0xe4, 0x54, 0xbf,
	0xfc, 0x94, 0x54, 0xb0, 0x2e, 0x66, 0xb0, 0x3c, 0x9a, 0xa8, 0x90, 0x12, 0x17, 0x8f, 0x4b, 0x66,
	0x71, 0x09, 0x5c, 0x15, 0x0b, 0x58, 0x15, 0x8a, 0x98, 0x92, 0x19, 0x97, 0x80, 0x7b, 0x6a, 0x49,
	0x50, 0x80, 0xb3, 0x73, 0x7e, 0x5e, 0x5a, 0x66, 0x7a, 0x50, 0x6a, 0x71, 0x81, 0x10, 0x1f, 0x17,
	0x53, 0x66, 0x01, 0xd4, 0x25, 0x40, 0x16, 0xc8, 0x6d, 0x05, 0xf9, 0x45, 0x25, 0x60, 0x57, 0xb0,
	0x06, 0x81, 0xd9, 0x4a, 0x16, 0x5c, 0x3c, 0x40, 0x1f, 0x38, 0xe7, 0x97, 0xe6, 0x95, 0x80, 0xf5,
	0x60, 0x73, 0xbf, 0x08, 0x17, 0x2b, 0x58, 0x01, 0x58, 0x23, 0x73, 0x10, 0x84, 0x93, 0xc4, 0x06,
	0x0e, 0x0c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xeb, 0x34, 0x9f, 0x25, 0x01, 0x00,
	0x00,
}
